white.test(reg1)
#-- White test function
white.test <- function(lmod,data=d){
u2 <- lmod$residuals^2
y <- fitted(lmod)
Ru2 <- summary(lm(u2 ~ y + I(y^2)))$r.squared
LM <- nrow(data)*Ru2
p.value <- 1-pchisq(LM, 2)
data.frame("Test statistic"=LM,"P value"=p.value)
}
white.test(reg1)
reg1 <- lm(PUN ~ t + I(t^2) )
summary(reg1)
ly <- log(PUN)
reg1 <- lm(ly ~ t + I(t^2) )
t <- 1:length(ly)
reg1 <- lm(ly ~ t + I(t^2) )
ly <- log(d2)
reg1 <- lm(ly ~ t + I(t^2) )
library(readr)
dati_PUN_17_20 <- read_csv("C:/Users/mpich/Desktop/DsLab/Datasets/dati_PUN_17-20.csv",
col_types = cols(Data = col_datetime(format = "%Y-%m-%d:%H:%M:%S"")))
View(dati_PUN_17_20)
library(readr)
dati_PUN_17_20 <- read_csv("C:/Users/mpich/Desktop/DsLab/Datasets/dati_PUN_17-20.csv",
col_types = cols(Data = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
View(dati_PUN_17_20)
library(readr)
dati_PUN_17_20 <- read_csv("C:/Users/mpich/Desktop/DsLab/Datasets/dati_PUN_17-20.csv",
col_types = cols(Data = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
View(dati_PUN_17_20)
autoplot(dati_PUN_17_20) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
autoplot(a10) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
library(ggplot2)
autoplot(a10) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
library(ggplot2)
autoplot(dati_PUN_17_20) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
??ts
View(dati_PUN_17_20)
y <- ts(c(dati_PUN_17_20$PUN), start= 2017-01-01 00:00:00)
y <- ts(c(dati_PUN_17_20$PUN), start= 2017)
autoplot(y) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
library(ggplot2)
tot <- c(dati_PUN_17_20$Data, dati_PUN_17_20$PUN)
autoplot(tot) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
library(ggplot2)
library(ggfortify)
tot <- c(dati_PUN_17_20$Data, dati_PUN_17_20$PUN)
autoplot(tot) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
library(ggplot2)
library(ggfortify)
y <- ts(dati_PUN_17_20$PUN, start=2017)
autoplot(dati_PUN_17_20) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
library(ggplot2)
library(ggfortify)
y <- ts(dati_PUN_17_20$PUN, start=2017)
autoplot(y) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
install.packages("ggfortify")
library(ggplot2)
library(ggfortify)
y <- ts(dati_PUN_17_20$PUN, start=2017)
autoplot(y) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
library(ggplot2)
library(ggfortify)
y <- ts(dati_PUN_17_20$PUN, start=2017)
autoplot(y) +
ggtitle("Energetic Price") +
ylab("$") +
xlab("Year")
library(ggplot2)
library(ggfortify)
y <- ts(dati_PUN_17_20$PUN, start=2017)
autoplot(y) +
ggtitle("PUN Price Italy 2017-2020") +
ylab("$") +
xlab("Year")
library(ggplot2)
library(ggfortify)
y <- ts(dati_PUN_17_20$PUN, start=2017)
ggplot(y) +
ggtitle("PUN Price Italy 2017-2020") +
ylab("$") +
xlab("Year")
library(ggplot2)
library(ggfortify)
y <- ts(dati_PUN_17_20$PUN, start=2017)
ggplot(dati_PUN_17_20) +
ggtitle("PUN Price Italy 2017-2020") +
ylab("$") +
xlab("Year")
library(ggplot2)
library(ggfortify)
y <- ts(dati_PUN_17_20$PUN, start=2017)
ggplot(dati_PUN_17_20, aes('years', 'price')) + geom_line()
ggplot(y, aes('years', 'price')) + geom_line()
ggplot(dati_PUN_17_20, aes('years', 'price')) + geom_line(position = 'jitter')
ggplot(dati_PUN_17_20, aes('Data', 'PUN')) + geom_line(position = 'jitter')
ggplot(dati_PUN_17_20, aes('Data', 'PUN')) + geom_line()
ggplot(data=dati_PUN_17_20, aes(x=Data, y=PUN, group=1)) +
geom_line()
library(readr)
dati_PUN_completi <- read_delim("C:/Users/mpich/Desktop/DsLab/Datasets/dati_PUN_completi.csv",
";", escape_double = FALSE, col_types = cols(Data = col_datetime(format = "%Y-%m-%d")),
locale = locale(decimal_mark = ","),
trim_ws = TRUE)
View(dati_PUN_completi)
library(ggplot2)
library(ggfortify)
ggplot(data=dati_PUN_completi, aes(x=Data, y=PUN, group=1)) +
geom_line()
ggplot(data=dati_PUN_17_20, aes(x=Data, y=PUN, group=1)) +
geom_line()
ggAcf(dati_PUN_17_20)
volatility()
install.packages("stochvol")
volatility()
ggseasonplot()
install.packages("fpp2")
ggseasonplot(dati_PUN_17_20)
ggseasonplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
autplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
autoplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
autoplot(dati_PUN_17_20, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
ggseasonplot(a10)
install.packages(c("fable", "fpp3", "tidyverse", "tsibble", "tsibbledata"))
install.packages(c("fable", "fpp3", "tidyverse", "tsibble", "tsibbledata"))
install.packages(c("fable", "fpp3", "tidyverse", "tsibble", "tsibbledata"))
ggseasonplot(a10)
ggseasonplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
dati_PUN_completi <- read_delim("C:/Users/mpich/Desktop/DsLab/Datasets/dati_PUN_completi.csv",
+     ";", escape_double = FALSE, col_types = cols(Data = col_datetime(format = "%Y-%m-%d")),
+     locale = locale(decimal_mark = ","),
+     trim_ws = TRUE)
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], "%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], "%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], "%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], "%Y-%m-%d %H:%M:%S"))
library(xts)
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], "%Y-%m-%d %H:%M:%S"))
View(dati_PUN_17_20)
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], "%Y-%m-%d%H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], "%Y-%m-%d %H:%M:%s"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], datetime))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1]))
library(readr)
dati_PUN_17_20 <- read_csv("C:/Users/mpich/Desktop/DsLab/Datasets/dati_PUN_17-20.csv")
View(dati_PUN_17_20)
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], "%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
cw_x <- xts(dati_PUN_17_20, order.by=as.Date(dati_PUN_17_20[,1], format="%Y-%m-%d %H:%M:%S"))
View(dati_PUN_17_20)
library(readr)
dati_PUN_17_20 <- read_csv("C:/Users/mpich/Desktop/DsLab/Datasets/dati_PUN_17-20.csv",
col_types = cols(Data = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
View(dati_PUN_17_20)
cw_x <- xts(dati_PUN_17_20, order.by=dati_PUN_17_20$Data)
cw_ts<-as.ts(cw_x)
head(cw_ts)
autoplot(cw_ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
library(ggplot2)
library(ggfortify)
library(fpp3)
library(forecast)
library(ggplot2)
library(ggfortify)
autoplot(cw_ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
ggseasonplot(cw_ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
dati2 <- aggregate(dati_PUN_completi$PUN, by=list(dati_PUN_completi$Data), mean)
View(dati2)
cw_2 <- xts(dati2, order.by=dati2$Data)
View(dati2)
cw_2 <- xts(dati2, order.by=dati2$Group.1)
cw_ts2<-as.ts(cw_2)
ggseasonplot(cw_ts2, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
p <- dati2 %>%
mutate(
year = factor(year(date)),     # use year to define separate curves
date = update(date, year = 1)  # use a constant year for the x-axis
) %>%
ggplot(aes(date, deni011, color = year)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b")
# Raw daily data
p + geom_line()
p <- dati2 %>%
mutate(
year = factor(year(date)),     # use year to define separate curves
date = update(date, year = 1)  # use a constant year for the x-axis
) %>%
ggplot(aes(date, deni011, color = year)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b")
library(tidyverse)
library(lubridate)
install.packages(c("fpp3", "tidyverse"))
install.packages(c("fpp3", "tidyverse"))
p <- dati2 %>%
mutate(
year = factor(year(date)),     # use year to define separate curves
date = update(date, year = 1)  # use a constant year for the x-axis
) %>%
ggplot(aes(date, deni011, color = year)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b")
reprex::reprex_info()
install.packages(c("fpp3", "reprex", "tidyverse"))
install.packages(c("fpp3", "reprex", "tidyverse"))
install.packages(c("fpp3", "reprex", "tidyverse"))
p <- dati2 %>%
mutate(
year = factor(year(date)),     # use year to define separate curves
date = update(date, year = 1)  # use a constant year for the x-axis
) %>%
ggplot(aes(date, deni011, color = year)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b")
library(ggplot2)
library(ggfortify)
library(fpp3)
library(forecast)
library(ggplot2)
library(ggfortify)
library(tidyverse)
library(lubridate)
library(reprex)
cw_x <- xts(dati_PUN_17_20, order.by=dati_PUN_17_20$Data)
cw_ts<-as.ts(cw_x)
autoplot(cw_ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
cw_2 <- xts(dati2, order.by=dati2$Group.1)
cw_ts2<-as.ts(cw_2)
autoplot(cw_ts2, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
cw_2 <- xts(dati2, order.by=as.Date(dati2[1,], '%Y-%m-%d'))
library(ggplot2)
library(ggfortify)
library(fpp3)
library(forecast)
library(ggplot2)
library(ggfortify)
library(tidyverse)
library(lubridate)
library(reprex)
library(xts)
cw_2 <- xts(dati2, order.by=as.Date(dati2[1,], '%Y-%m-%d'))
cw_2 <- xts(dati2, order.by=as.Date(dati2[1,], '%Y/%m/%d'))
cw_2 <- xts(dati2, order.by=as.POSIXlt(dati2[1,]))
cw_2 <- xts(dati2, order.by=as.POSIXlt(dati2[,1]))
cw_ts2<-as.ts(cw_2)
autoplot(cw_ts2, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
str(dati2)
cw_2 <- xts(dati2, order.by=dati2[,1])
cw_ts2<-as.ts(cw_2)
autoplot(cw_ts2, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
dati3 <- dati2[,1]
cw_2 <- xts(dati2, order.by=dati3)
cw_ts2<-as.ts(cw_2)
autoplot(cw_ts2, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
View(dati2)
autoplot(as.zoo(cw_ts2), facet = TRUE) + scale_x_date(date_labels = '%b')
autoplot(as.zoo(cw_ts2), facet = TRUE) + scale_x_date(date_labels = '%b')
cw_2 <- xts(dati2, order.by=as.Date(dati2[,1], '%Y-%m-%d'))
cw_2 <- xts(dati2, order.by=as.Date(dati2[,1], tz='UTC'))
cw_ts2<-as.ts(cw_2)
autoplot(cw_ts2, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
cw_2 <- xts(dati2, order.by=as.Date(dati2[,1], tz=tz))
cw_2 <- xts(dati2, order.by=as.Date(dati2[,1], format = "%Y-%m-%d"))
cw_ts2<-as.ts(cw_2)
autoplot(cw_ts2, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
cw_2 <- xts(dati2, order.by=dati2$Group.1)))
cw_ts2<-as.ts(cw_2)
cw_2 <- xts(dati2, order.by=dati2$Group.1))
cw_2 <- xts(dati2, order.by=dati2$Group.1)
cw_ts2<-as.ts(cw_2)
head(cw_ts2)
View(cw_ts2)
autoplot(cw_2)
autoplot(cw_ts2, CI=TRUE, pval=TRUE, plotTable=TRUE, divideTime=5,
legendLabs=c("surgical", "percutaneous"),
title="Time to infection following catheter placement \n
by type of catheter, for dialysis patients")
library(ggplot2)
library(ggfortify)
library(fpp3)
library(forecast)
library(ggplot2)
library(ggfortify)
library(tidyverse)
library(lubridate)
library(reprex)
library(xts)
install.packages("fpp3")
.libPaths()
install.packages("fpp3")
install.packages("fpp3")
install.packages(c("fpp3", "tidyverse"))
install.packages(c("fpp3", "tidyverse"))
autoplot(cw_ts, year.labels=TRUE, year.labels.left=TRUE) +  ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
autoplot(cw_ts, year.labels=TRUE, year.labels.left=TRUE) +  ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
library(ggplot2)
library(ggfortify)
library(fpp3)
library(forecast)
library(ggplot2)
library(ggfortify)
library(tidyverse)
library(lubridate)
library(xts)
install.packages("fpp3")
install.packages("fpp3")
install.packages("fpp3")
library(ggplot2)
library(ggfortify)
library(fpp3)
library(forecast)
library(ggplot2)
library(ggfortify)
library(tidyverse)
library(lubridate)
library(xts)
autoplot(cw_ts, year.labels=TRUE, year.labels.left=TRUE) +  ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
autoplot(cw_ts)
str(dati2)
plot(cw_ts2)
str(dati_PUN_completi)
str(dati2)
library(dplyr)
Temperatures <- mutate(dati2, MonthYear = paste(year(Date),formatC(month(Date), width = 2, flag = "0")))
Temperatures <- mutate(dati2, MonthYear = paste(year(Group.1),formatC(month(Group.1), width = 2, flag = "0")))
# Day of the week
Temperatures <- mutate(dati2, Yearday = paste(year(Group.1), formatC(month(Group.1), width = 2, flag = "0"),
formatC(day(Group.1), width = 2, flag = "0")))
# Week of the year
Temperatures <- mutate(dati2, Week = week(Group.1))
View(Temperatures)
dati2 <- mutate(dati2, MonthYear = paste(year(Group.1),formatC(month(Group.1), width = 2, flag = "0")))
dati2 <- mutate(dati2, Yearday = paste(year(Group.1), formatC(month(Group.1), width = 2, flag = "0"),
formatC(day(Group.1), width = 2, flag = "0")))
dati2 <- mutate(dati2, Week = week(Group.1))
dati2 <- mutate(dati2s, Year = year(Group.1))
dati2 <- mutate(dati2, Year = year(Group.1))
dati2$Year <- as.factor(dati2$Year)
str(dati2)
pun_month <- aggregate(dati2$PUN, by = list(dati2$MonthYear), FUN = function(x) mean(x, na.rm=T))
pun_month <- aggregate(dati2$x, by = list(dati2$MonthYear), FUN = function(x) mean(x, na.rm=T))
View(pun_month)
View(dati2)
myts <- ts(pun_month$x, frequency=12, start = c(2004, 04), end = c(2020, 04))
plot(myts)
myds_month <- decompose(myts)
plot(myds_month)
myholtts <-HoltWinters(myts)
myhw <- forecast(myholtts, h = 24, findfrequency = TRUE)
plot(myhw)
autoplot(myts) + ggtitle("Melbourne temperatures time series") +
xlab("Time (year)") + ylab("Temperatures (C)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggseasonplot(myts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
ggseasonplot(mys, polar=TRUE) +
ylab("$ million") +
ggtitle("Polar seasonal plot: antidiabetic drug sales")
ggseasonplot(myts, polar=TRUE) +
ylab("$ million") +
ggtitle("Polar seasonal plot: antidiabetic drug sales")
ggsubseriesplot(myts) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: antidiabetic drug sales")
myts2 <- window(myts, start=2004)
gglagplot(myts2)
myts2 <- window(myts, start=2004, frequency = 4)
gglagplot(myts2)
ggAcf(myts2)
myts2 <- window(myts, start=2004, frequency = 12)
gglagplot(myts2)
ggAcf(myts2)
myts2 <- window(myts, start=2005, frequency = 12)
gglagplot(myts2)
ggAcf(myts2)
ggAcf(myts2,lag = 48)
ggAcf(myts2,lag = 192)
dati_PUN_17_20 <- mutate(dati_PUN_17_20, MonthYear = paste(year(Group.1),formatC(month(Group.1), width = 2, flag = "0")))
dati_PUN_17_20 <- mutate(dati_PUN_17_20, MonthYear = paste(year(Data),formatC(month(Data), width = 2, flag = "0")))
dati_PUN_17_20 <- mutate(dati_PUN_17_20, Yearday = paste(year(Data), formatC(month(Data), width = 2, flag = "0"),
formatC(day(Data), width = 2, flag = "0")))
dati_PUN_17_20 <- mutate(dati_PUN_17_20, Week = week(Data))
# hours of the day
dati_PUN_17_20 <- mutate(dati_PUN_17_20, dayhour = paste(year(Data), formatC(month(Data), width = 2, flag = "0"),
formatC(day(Data), width = 2, flag = "0",formatC(hour(Data), width = 2, flag = "0" ))))
View(dati_PUN_17_20)
dati_PUN_17_20 <- mutate(dati_PUN_17_20, dayhour = paste(year(Data), formatC(month(Data), width = 2, flag = "0"),
formatC(day(Data), width = 2, flag = "0", formatC(hour(Data), width = 2, flag = "0" )))
dati_PUN_17_20 <- mutate(dati_PUN_17_20, dayhour = paste(year(Data), formatC(month(Data), width = 2, flag = "0"),
formatC(day(Data), width = 2, flag = "0", formatC(hour(Data), width = 2, flag = "0" ))))
dati_PUN_17_20 <- mutate(dati_PUN_17_20, dayhour = paste(year(Data), formatC(month(Data), width = 2, flag = "0"),
formatC(day(Data), width = 2, flag = "0"), formatC(hour(Data), width = 2, flag = "0" )))
View(dati_PUN_17_20)
View(dati_PUN_17_20)
dati_PUN_17_20 <- mutate(dati_PUN_17_20, Year = year(Data))
dati_PUN_17_20$Year <- as.factor(dati_PUN_17_20$Year)
str(dati_PUN_17_20)
pun_month <- aggregate(dati_PUN_17_20$x, by = list(dati_PUN_17_20$MonthYear), FUN = function(x) mean(x, na.rm=T))
pun_month <- aggregate(dati_PUN_17_20$PUN, by = list(dati_PUN_17_20$MonthYear), FUN = function(x) mean(x, na.rm=T))
myts <- ts(pun_month$x, frequency=12, start = c(2004, 04), end = c(2020, 04))
plot(myts)
myts <- ts(pun_month$x, frequency=12, start = c(2017, 01), end = c(2020, 04))
plot(myts)
myds_month <- decompose(myts)
plot(myds_month)
myholtts <-HoltWinters(myts)
myhw <- forecast(myholtts, h = 24, findfrequency = TRUE)
plot(myhw)
autoplot(myts) + ggtitle("Melbourne temperatures time series") +
xlab("Time (year)") + ylab("Temperatures (C)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggseasonplot(myts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
pun_hour <- aggregate(dati_PUN_17_20$PUN, by = list(dati_PUN_17_20$dayhour), FUN = function(x) mean(x, na.rm=T))
pun_hour <- aggregate(dati_PUN_17_20$PUN, by = list(dati_PUN_17_20$dayhour), FUN = function(x) mean(x, na.rm=T))
myts <- ts(pun_hour$x, frequency=24, start = c(2017, 01), end = c(2020, 04))
plot(myts)
myds_month <- decompose(myts)
plot(myds_hour)
myds_hour <- decompose(myts)
plot(myds_hour)
myts2 <- window(myts, start=2017, frequency = 24)
gglagplot(myts2)
ggAcf(myts2,lag = 26.280)
myts2 <- window(myts, start=2017, frequency = 24)
gglagplot(myts2)
ggAcf(myts2,lag = 26280)
myts <- ts(pun_month$x, frequency=2016, start = c(2017, 01), end = c(2020, 04))
plot(myts)
myts <- ts(pun_month$x, frequency=672, start = c(2017, 01), end = c(2020, 04))
plot(myts)
myts <- ts(pun_month$x, frequency=24, start = c(2017, 01), end = c(2020, 04))
plot(myts)
myts <- ts(pun_month$x, frequency=12, start = c(2017, 01), end = c(2020, 04))
plot(myts)
